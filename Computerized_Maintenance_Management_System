"""This Computerized Maintenance Management System (CMMS) will schedule and track maintenance repairs performed by technicians on the conveyor system. 
Scheduling and tracking preventive and corrective maintenance on various equipment using this CMMS software will ensure that the assets are properly maintained to reduce breakdowns.  
Minimizing breakdowns on the conveyor system will decrease the ratio of bags missed or failed to load on the aircraft due to mechanical or electrical breakdowns on the conveyor system.  
This will ultimately enhance the user experience and improve customer satisfaction when booking flights and traveling with southwest airlines 
as they are confident that their luggage will accompany them on their flight to their destination.  """

# tkinter GUI application creation.  PIL to support images for the application
import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk

# define variables ConveyorID, Reason, Technicians, Labor Hours, Parts and Work Status.
def conveyorId(value):
    selectedLabel1.config(text=f"Selected: {value}")

def reason(value):
    selectedLabel2.config(text=f"Selected: {value}")
    
def requester(value):
    selectedLabel3.config(text=f"Selected: {value}")
    
def labor(value):
    selectedLabel4.config(text=f"Selected: {value}")

def laborHours(value):
    selectedLabel5.config(text=f"Selected: {value}")

def parts(value):
    selectedLabel6.config(text=f"Selected: {value}")

def workStatus(value):
    selectedLabel7.config(text=f"Selected: {value}")

# Exit application variable
def exitApplication():
    root.destroy()  

# Main application window named root.  This window will have an image, header, multiple labels and buttons to simplify the user experience.
root = tk.Tk()
root.title("COMPUTERIZED MAINTENANCE MANAGEMENT SYSTEM (CMMS)")

# Root window image file path
imagePath = r"C:\Users\shoddeji\Documents\ERMC PC\MISC\Deji\Deji\2024\My Ivy\Software Development Technical Certificate\SDEV220\Final Project\CMMS.png"
image = Image.open(imagePath)

maxWidth = 600
width, height = image.size
if width > maxWidth:
    newWidth = maxWidth
    newHeight = int((newWidth / width) * height)
    image = image.resize((newWidth, newHeight))

# Image object converted to a Tkinter PhotoImage object
tkImage = ImageTk.PhotoImage(image)

# Label widget to display the image
imageLabel = ttk.Label(root, image=tkImage)
imageLabel.pack(pady=15)  

titleLabel = tk.Label(root, text="NEW WORK ORDER", font=("Helvetica", 20, "bold"))
titleLabel.pack(pady=20)  

    

    
# Variables buttonClick 1-7 to define selections Origin, Destination, Passengers, Cabin Experience, Bags & Submit
def buttonClick1():
    return

def buttonClick2():
    return

def buttonClick3():
    return

def buttonClick4():
    return

def buttonClick5():
    return

def buttonClick6():
    conveyorIdVal = selectedOption1.get()
    reasonVal = selectedOption2.get()
    requesterVal = selectedOption3.get()
    laborVal = ()
    laborHoursVal = ()
    partsVal = ()
    workStatusVal = ()



        
    # Callback to Maintenance Class
    maintenance = Maintenance(conveyorIdVal, reasonVal, requesterVal, laborVal, laborHoursVal, partsVal, workStatusVal)

    # Display Work Order details in a separate window
    displayResults(maintenance)

    # Second window defined to display work order details.  window called 'WORK ORDER'
def displayResults(details):

    
    resultWindow = tk.Toplevel(root)
    resultWindow.title("WORK ORDER")

    
    #   Second image for resultWindow
    imagePath1 = r"C:\Users\shoddeji\Documents\ERMC PC\MISC\Deji\Deji\2024\My Ivy\Software Development Technical Certificate\SDEV220\Final Project\workorder.png"
    image = Image.open(imagePath1)

    maxWidth = 400
    width, height = image.size
    if width > maxWidth:
        newWidth = maxWidth
        newHeight = int((newWidth / width) * height)
        image = image.resize((newWidth, newHeight), Image.ANTIALIAS)

    # Image object converted to a Tkinter PhotoImage object
    global tkImageResult
    tkImageResult = ImageTk.PhotoImage(image)

    # Label widget created to display the image
    imageLabel = ttk.Label(resultWindow, image=tkImageResult)
    imageLabel.image = tkImageResult  
    imageLabel.pack(pady=20)  

    # Title for resultsWindow called WORK ORDER
    titleLabel = tk.Label(resultWindow, text="WORK ORDER", font=("Helvetica", 16, "bold"))
    titleLabel.pack(pady=20) 
    
    def buttonClick7():
        laborVal = selectedOption4.get()
        laborHoursVal = selectedOption5.get()
        partsVal = selectedOption6.get()
        workStatusVal = selectedOption7.get()
    



    # Labels created to display results (conveyorId, reason, technicians, laborHours, parts and workStatus)
    conveyorIdLabel = tk.Label(resultWindow, text=f"Conveyor ID: {details.conveyorId}")
    conveyorIdLabel.pack()

    reasonLabel = tk.Label(resultWindow, text=f"Reason: {details.reason}")
    reasonLabel.pack()
    
    requesterLabel = tk.Label(resultWindow, text=f"Requester: {details.requester}")
    requesterLabel.pack()
    
    
    # Empty label used to create spacing 
     
    spaceLabel = tk.Label(resultWindow, text=" ")  # Create an empty label for spacing
    spaceLabel.pack()
    
    laborLabel = tk.Label(resultWindow, text=f"Labor: {details.labor}")
    laborLabel.pack()

    laborHoursLabel = tk.Label(resultWindow, text=f"Labor Hours: {details.laborHours}")
    laborHoursLabel.pack()

    partsLabel = tk.Label(resultWindow, text=f"Parts: {details.parts}")
    partsLabel.pack()
    
    workStatusLabel = tk.Label(resultWindow, text=f"Work Status: {details.workStatus}")
    workStatusLabel.pack()
    
    
    
    
    # Button for Type of Labor Selection
    button = ttk.Button(resultWindow, text="LABOR", command=buttonClick4)
    button.pack(pady=20)

    options4 = ["","ML (Mathew Lisecki)", "KG (Kenroy Griffith)", "JC (Josh Crockett)", "OK (Omar Kiettega)", "WC (Warren Chavon)", "LS (Luis Santiago)", "MC (Malique Carroll)", "CO (Cermy Oneus)","KA (Kenneth Ajayi)", "CW (Christopher Williams)"]
    selectedOption4 = tk.StringVar(resultWindow)
    selectedOption4.set(options4[0])  # Set the default option

    dropdown = ttk.Combobox(resultWindow, textvariable=selectedOption4, values=options4, state="readonly")
    dropdown.pack(pady=10)
    dropdown.bind("<<ComboboxSelected>>", lambda event: labor(selectedOption4.get()))

    selectedLabel4 = ttk.Label(resultWindow, text="Selected: ")
    selectedLabel4.pack(pady=10)




    # Button for Type of Labor Hours Selection
    button = ttk.Button(resultWindow, text="LABOR HOURS", command=buttonClick5)
    button.pack(pady=20)

    options5 = ["",".5", "1","1.5", "2","2.5", "3","3.5", "4","4.5", "5","5.5", "6","6.5", "7","7.5", "8"]
    selectedOption5 = tk.StringVar(root)
    selectedOption5.set(options5[0])  # Set the default option

    dropdown = ttk.Combobox(resultWindow, textvariable=selectedOption5, values=options5, state="readonly")
    dropdown.pack(pady=10)
    dropdown.bind("<<ComboboxSelected>>", lambda event: laborHours(selectedOption5.get()))

    selectedLabel5 = ttk.Label(resultWindow, text="Selected: ")
    selectedLabel5.pack(pady=10)
    
    


    # Button for Type of Parts
    button = ttk.Button(resultWindow, text="PARTS", command=buttonClick6)
    button.pack(pady=20)

    options6 = ["","ELECTRIC MOTOR","GEARBOX ASSEMBLY","CONVEYOR BELTING","ROLLER/SHAFT ASSEMBLY", "BEARINGS"]
    selectedOption6 = tk.StringVar(resultWindow)
    selectedOption6.set(options6[0])  # Set the default option

    dropdown = ttk.Combobox(resultWindow, textvariable=selectedOption6, values=options6, state="readonly")
    dropdown.pack(pady=10)
    dropdown.bind("<<ComboboxSelected>>", lambda event: parts(selectedOption6.get()))

    selectedLabel6 = ttk.Label(resultWindow, text="Selected: ")
    selectedLabel6.pack(pady=10)




    # Button for Type of Work Status
    button = ttk.Button(resultWindow, text="WORK STATUS", command=buttonClick7)
    button.pack(pady=20)

    options7 = ["","REQUESTED","IN PROGRESS","COMPLETED","ON-HOLD"]
    selectedOption7 = tk.StringVar(resultWindow)
    selectedOption7.set(options7[0])  # Set the default option

    dropdown = ttk.Combobox(resultWindow, textvariable=selectedOption7, values=options7, state="readonly")
    dropdown.pack(pady=10)
    dropdown.bind("<<ComboboxSelected>>", lambda event: workStatus(selectedOption7.get()))

    selectedLabel7 = ttk.Label(resultWindow, text="Selected: ")
    selectedLabel7.pack(pady=10)




# Button for Conveyor Id Selection
button = ttk.Button(root, text="CONVEYOR ID", command=buttonClick1)
button.pack(pady=20)

# Drop down menu that displays all options 
options1 = ["","Que (Que Conveyor)", "Transport (Transport Conveyor)", "PowerTurn (PowerTurn Conveyor)", "Merge (Merge Conveyor)", "HSD (High Speed Diverter Gen. 1)", "Makeup Unit (Carousel)", "Transnorm (Transnorm Conveyor)", "HSD II (High Speed Diverter Gen. 2)","VSU (Vertical Sort Unit)"]
selectedOption1 = tk.StringVar(root)
selectedOption1.set(options1[0]) 

dropdown = ttk.Combobox(root, textvariable=selectedOption1, values=options1, state="readonly")
dropdown.pack(pady=10)
dropdown.bind("<<ComboboxSelected>>", lambda event: conveyorId(selectedOption1.get()))

#Label to display final selection
selectedLabel1 = ttk.Label(root, text="Selected: ")
selectedLabel1.pack(pady=10)




# Button for Number of Reason Selection
button = ttk.Button(root, text="REASON", command=buttonClick2)
button.pack(pady=20)

options2 = ["","Motor Failure", "Belt Repair/Replacement", "Gearbox Repair/Replacement", "Bearing Replacement", "Shaft/Roller Replacement", "Electrical Component Repair", "Mechanical Component Repair"]
selectedOption2 = tk.StringVar(root)
selectedOption2.set(options2[0])  # Set the default option

dropdown = ttk.Combobox(root, textvariable=selectedOption2, values=options2, state="readonly")
dropdown.pack(pady=10)
dropdown.bind("<<ComboboxSelected>>", lambda event: reason(selectedOption2.get()))

selectedLabel2 = ttk.Label(root, text="Selected: ")
selectedLabel2.pack(pady=10)




# Button for Requester Selection
button = ttk.Button(root, text="REQUESTER", command=buttonClick3)
button.pack(pady=20)

options3 = ["","ML (Mathew Lisecki)", "KG (Kenroy Griffith)", "JC (Josh Crockett)", "OK (Omar Kiettega)", "WC (Warren Chavon)", "LS (Luis Santiago)", "MC (Malique Carroll)", "CO (Cermy Oneus)","KA (Kenneth Ajayi)", "CW (Christopher Williams)"]
selectedOption3 = tk.StringVar(root)
selectedOption3.set(options3[0])  # Set the default option

# Drop down menu that displays all options 
dropdown = ttk.Combobox(root, textvariable=selectedOption3, values=options3, state="readonly")
dropdown.pack(pady=10)
dropdown.bind("<<ComboboxSelected>>", lambda event: requester(selectedOption3.get()))

selectedLabel3 = ttk.Label(root, text="Selected: ")
selectedLabel3.pack(pady=10)




# Button for Submit
button = ttk.Button(root, text="SUBMIT", command=buttonClick6)
button.pack(pady=20)

options8 = [","]
selectedOption8 = tk.StringVar(root)
selectedOption8.set(options8[0])  # Set the default option


# Button for Exit
button = ttk.Button(root, text="EXIT", command=exitApplication)
button.pack(pady=20)



#Maintenance Class created to establish (conveyorId, reason, requester, labor, laborHours, parts, workStatus)
class Maintenance:
    def __init__(self, conveyorId, reason, requester, labor, laborHours, parts, workStatus):
        self.conveyorId = conveyorId
        self.reason = reason
        self.requester = requester
        self.labor = labor
        self.laborHours = laborHours
        self.parts = parts
        self.workStatus = workStatus

    def get_conveyorId(self):
        return self.conveyorId
    
    def get_reason(self):
        return self.reason
    
    def get_requester(self):
        return self.requester
    
    def get_labor(self):
        return self.labor
    
    def get_laborHours(self):
        return self.laborHours
    
    def get_parts(self):
        return self.parts
    
    def get_workStatus(self):
        return self.workStatus

    def set_conveyorId(self, conveyorId):
        self.conveyorId = conveyorId
    
    def set_reason(self, reason):
        self.reason = reason
    
    def set_requester(self, requester):
        self.requester = requester
        
    def set_labor(self, labor):
        self.labor = labor
        
    
    def set_laborHours(self, laborHours):
        self.laborHours = laborHours
        
    def set_workStatus(self, workStatus):
        self.workStatus = workStatus


# Run the main event loop
root.mainloop()
